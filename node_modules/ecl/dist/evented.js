var Event, Evented,
  extend = require("extends__"),
  hasProp = {}.hasOwnProperty;

Event = require('./event');

module.exports = Evented = (function(superClass) {
  extend(Evented, superClass);

  function Evented() {
    Evented.__super__.constructor.apply(this, arguments);
    this.listeners = [{}, {}];
  }

  Evented.prototype.addListener = function(type, listener, capture) {
    var listeners, ref, ref1, ref2;
    if (capture == null) {
      capture = false;
    }
    if (typeof type === 'object') {
      ref = type, type = ref.type, listener = ref.listener, capture = ref.capture;
    }
    if (((ref1 = this.events) != null ? ref1[type] : void 0) && typeof listener === 'function') {
      listeners = ((ref2 = this.listeners[capture ? 1 : 0]) != null ? ref2[type] || (ref2[type] = []) : void 0);
      if (-1 === listeners.indexOf(listener)) {
        listeners.push(listener);
      }
    }
    return this;
  };

  Evented.prototype.removeListener = function(type, listener, capture) {
    var idx, listeners, ref, ref1;
    if (capture == null) {
      capture = false;
    }
    if (type instanceof Object) {
      ref = type, type = ref.type, listener = ref.listener, capture = ref.capture;
    }
    if (type && typeof listener === 'function') {
      if (listeners = (ref1 = this.listeners[capture ? 1 : 0]) != null ? ref1[type] : void 0) {
        if (-1 !== (idx = listeners.indexOf(listener))) {
          listeners.splice(idx, 1);
        }
      }
    }
    return this;
  };

  Evented.prototype.dispatchEvent = function(event) {
    var i, len, listener, listeners, phase, ref, ref1, type;
    if (!((event != null ? event.aborted : void 0) || (event != null ? event.canceled : void 0))) {
      if ((type = event != null ? event.type : void 0) && this.events[type]) {
        phase = event.phase;
        if (((3 > phase && phase > 0)) && (listeners = (ref = this.listeners) != null ? ref[2 - phase][type] : void 0)) {
          for (i = 0, len = listeners.length; i < len; i++) {
            listener = listeners[i];
            if (((ref1 = event.___runtime) != null ? ref1.canceled : void 0) || event.aborted) {
              break;
            }
            listener.call(this, event);
          }
        }
      }
    }
    return this;
  };

  Evented.prototype.broadcastEvent = function(event, target) {
    var base, child, i, len, phase, ref, ref1, type;
    if ((type = event != null ? event.type : void 0) && (event.phase || 0) < 3) {
      if (!(event.aborted || event.___runtime.stopped)) {
        (base = event.___runtime).source || (base.source = this);
        phase = (event.phase || (event.phase = 1));
        if (event.target === this) {
          event.phase = 2;
        }
        if (event.phase === 1) {
          this.dispatchEvent(event);
          if (this.children) {
            ref = this.children;
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              if (!(event.aborted || event.___runtime.canceled)) {
                child.broadcastEvent(event);
              } else {
                break;
              }
            }
          }
        }
        if (event.target === this) {
          event.phase = 2;
        }
        if (event.phase === 2) {
          this.dispatchEvent(event);
        }
        if (event.___runtime.source === this && event.phase < 4) {
          if ((ref1 = event.callback) != null) {
            if (typeof ref1.call === "function") {
              ref1.call(this, event);
            }
          }
          event.phase = 4;
        }
      }
    }
    return this;
  };

  return Evented;

})(require('./node'));
